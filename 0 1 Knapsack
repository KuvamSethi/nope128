#include <iostream>
#include <chrono>
#include <vector>
#include <iomanip> 
using namespace std;
int knapSack(int W, int wt[], int val[], int n)
{
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 1; w <= W; ++w) {
            if (wt[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], val[i - 1] + dp[i - 1][w - wt[i - 1]]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    cout << "DP Table:\n";
    for (int i = 0; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            cout << setw(6) << dp[i][w];
        }
        cout << endl;
    }
    return dp[n][W];
}
int main()
{
    int profit[] = {1, 3, 2, 5, 7, 2};
    int weight[] = {2, 4, 1, 3, 4, 2};
    int W = 10;
    int n = sizeof(profit) / sizeof(profit[0]);
    auto start = chrono::high_resolution_clock::now();
    int maxProfit = knapSack(W, weight, profit, n);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double, milli> duration = end - start;
    cout << "Maximum profit: " << maxProfit << endl;
    cout << "Time taken: " << duration.count() << " ms" << endl;
    return 0;
}
