#include <iostream>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;
};


const int E = 5; 
const int V = 4; 

bool compareEdges(const Edge& a, const Edge& b) {
    return a.weight < b.weight;
}

class DisjointSet {
public:
    DisjointSet(int n) {
        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int find(int u) {
        if (parent[u] != u)
            parent[u] = find(parent[u]);
        return parent[u];
    }

    void unionSets(int u, int v) {
        parent[find(u)] = find(v);
    }

private:
    int parent[100]; 
};


void kruskal(Edge edges[E]) {
    Edge result[E];
    DisjointSet ds(V);

  
    sort(edges, edges + E, compareEdges);

    int e = 0;
    for (int i = 0; i < E; i++) {
        if (ds.find(edges[i].src) != ds.find(edges[i].dest)) {
            ds.unionSets(edges[i].src, edges[i].dest);
            result[e++] = edges[i];
        }
    }


    cout << "Edges in the Minimum Spanning Tree:\n";
    for (int i = 0; i < e; i++) {
        cout << result[i].src << " -- " << result[i].dest << " == " << result[i].weight << "\n";
    }
}

int main() {
    
    Edge edges[E] = {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    kruskal(edges);

    return 0;
}
