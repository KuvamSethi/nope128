#include <iostream>
#include <chrono>
#include <ctime>

using namespace std;

void mergesort(int arr[], int s, int e);
void merge(int arr[], int s, int m, int e);
void printArray(int arr[], int size);

int main() {
    int arr[] = {9, 8, 11, 4, 6, 3, 10, 13, 23, 1, 45, 16, 22, 29, 30, 35};
    int size = sizeof(arr) / sizeof(arr[0]);

    auto start = chrono::high_resolution_clock::now();
    mergesort(arr, 0, size - 1);
    auto stop = chrono::high_resolution_clock::now();

    cout << "Sorted array: " << endl;
    printArray(arr, size);

    auto duration = chrono::duration_cast<chrono::nanoseconds>(stop - start).count();
    cout << "Time taken is " << duration << " nanoseconds" << endl;

    return 0;
}

void mergesort(int arr[], int s, int e) {
    if (s < e) {
        int mid = (s + e) / 2;
        mergesort(arr, s, mid);
        mergesort(arr, mid + 1, e);

        merge(arr, s, mid, e);
    }
}

void merge(int arr[], int s, int m, int e) {
    int n1 = m - s + 1;
    int n2 = e - m;

    int L[n1], M[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[s + i];
    for (int j = 0; j < n2; j++)
        M[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = s;

    while (i < n1 && j < n2) {
        if (L[i] <= M[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = M[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = M[j];
        j++;
        k++;
    }
}

void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        cout << arr[i] << " ";
    cout << endl;
}
